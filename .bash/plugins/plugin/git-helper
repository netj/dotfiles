#!/usr/bin/env bash
# Git aliases and etc.
#
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2012-06-13
# Requires: bpm.utils
################################################################################

bash_plugin_interactive() {
    bash_default_alias g    "git status --untracked=no"
    bash_default_alias G    "git status"
    bash_default_alias gd   "git diff --find-copies-harder"
    bash_default_alias gds  "git diff --staged"
    bash_default_alias gD   "git diff HEAD"
    bash_default_alias ga   "git add"
    bash_default_alias gau  "git add -u"
    bash_default_alias gl   "git log --decorate --graph"
    bash_default_alias gb   "git branch -v"
    bash_default_alias gbg  "git branch -v | grep -F ' [gone] '"
    bash_default_alias gbgD "git for-each-ref --format $(printf %q '%(refname:short) %(upstream:track)') | sed $(printf %q '/ \[gone\]$/!d; s/ \[gone\]$//') | xargs -r git branch -D"
    bash_default_alias gc   "git checkout"
    bash_default_alias gcb  "git checkout -b"
    bash_default_alias gfcb "git fetch origin HEAD; git checkout FETCH_HEAD -b"
    bash_default_alias gC   "git commit"
    bash_default_alias gCA  "git commit --amend"
    bash_default_alias gp   "git pull"
    bash_default_alias gpom "git pull origin main"
    bash_default_alias gP   "git push"
    bash_default_alias gPuH "git push -u origin HEAD"
    bash_default_alias gf   "git fetch"
    bash_default_alias gfp  "git fetch --prune"
    bash_default_alias gr   "git remote -v"
    bash_default_alias gru  "git remote update"
    bash_default_alias grup "git remote update --prune"
    bash_default_alias gR   "git rebase"
    bash_default_alias gRI  "git rebase -i"
    bash_default_alias gRC  "git rebase --continue"
    bash_default_alias gRA  "git rebase --abort"
    bash_default_alias gcp  "git cherry-pick"
    bash_default_alias gmt  "git mergetool"
    bash_default_alias gRH  "git reset --hard HEAD"
    bash_default_alias gRHu "git reset --hard HEAD@{u}"  # reset to upstream branch
    bash_default_alias gS   "git stash"
    bash_default_alias gSP  "git stash pop"
    bash_default_alias gSA  "git stash apply"

    # github cli or hub.github.com
    bash_default_alias ghw  'gh pr view -w || gh repo view -w -b "$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)" || hub browse'
    bash_default_alias ghpC 'gh pr create -w'
    bash_default_alias ghpc 'gh pr checkout'

    # GitHub CLI!
    ! type -p gh &>/dev/null || {
        source <(gh completion -s bash)
    }

    # launch Vim with fugitive :Gstatus
    bash_default_alias gg   '_git_dir=$(git rev-parse --git-dir) && vim "$_git_dir"/index'

    #bash_default_alias gt git-tether-remote  # XXX use: github.com/netj/remocon

    bash_default_alias gss "git submodule summary"
    bash_default_alias gsu "git submodule update --init"
    bash_default_alias gsp "git subrepo -v pull"
    bash_default_alias gsP "git subrepo -v push"
    bash_default_alias gsb "git subrepo -v branch"
    bash_default_alias gsC "git subrepo -v commit"
    bash_default_alias gsc "git subrepo -v clean"

}

bash_plugin_load() {
    # a handy way to patch remote
    git-tether-remote() {
        (
        set -euo pipefail
        hostpath=$1; shift
        case $hostpath in
            (*:*) host=${hostpath%%:*} dir=${hostpath#*:};;
            (*) echo >&2 "$hostpath: host:path required"; false;;
        esac
        commit=$(git rev-parse HEAD)
        branch=$(git symbolic-ref --short HEAD)
        git push -q -f "$host:$dir" HEAD:"$branch" || {
            ssh "$host" "
                set -eux
                mkdir -p $(printf %q "$dir")
                cd $(printf %q "$dir")
                [[ -e .git ]] || git init
            "
            git push -f "$host:$dir" HEAD:"$branch"
        }
        git diff HEAD | ssh "$host" "
            set -eu
            branch=$(printf %q "$branch")
            commit=$(printf %q "$commit")
            cd $(printf %q "$dir")
            # reverse any previous patch for tethering
            if [[ -e .git/tethered.patch ]]; then
                git apply -R <.git/tethered.patch || git stash
                mv .git/tethered.patch{,~}
            fi
            # and keep a copy of the current patch
            cat >.git/tethered.patch
            # preserve any outstanding/untethered changes
            git diff --quiet --exit-code || git stash
            # make sure we're on the tethered branch and commit
            [[ \$(git symbolic-ref --short HEAD) = \$branch ]] || git checkout -f \$branch --
            git reset --hard \$commit
            # with the same outstanding changes on top of the current commit
            ! [[ -s .git/tethered.patch ]] || git apply --apply --stat <.git/tethered.patch
            "
        )
    }
}
