#!/usr/bin/env bash
# vocabularies for interactive shells
# 
# Author: Jaeho Shin <netj@sparcs.org>
# Created: 2013-05-09
################################################################################
shopt -s extglob

bash_plugin_interactive() {

bash_getkey() {
    # bash_getkey will read a key among the ones specified in the prompt.  Each key # should be lower-cased and surrounded by square brackets.  If there's an
    # asterisk (*), it will accept any key.  Otherwise, it keeps showing prompt and
    # tries to read until a valid key is entered.  You can pass an optional timeout
    # and default key as argument.
    #
    # For example, the following invokation will set VAR to the key user entered,
    # defaulting to "a" after 2 secs of timeout:
    #   bash_getkey VAR "[a] do one thing; [b] do another; or [q*]uit" 2 a
    local keyVarName=$1 prompt=$2 timeout=${3:-} defaultkey=${4:-}
    local keys=${prompt//\]*([^\[\]])\[/}; keys=${keys#*\[}; keys=${keys%\]*}
    case $keys in
        *"*"*) keys="?" ;;
        *) keys="[$keys]" ;;
    esac
    # format, colorize prompt
    prompt=${prompt//[\[]/$'\e[33m'[} # yellow
    prompt=${prompt//[\]]/]$'\e[0m'}
    if [ -n "$defaultkey" ]; then
        # uppercase default key and color with green
        local defaultkeyUpperCase=$(tr a-z A-Z <<<"$defaultkey")
        prompt=${prompt//[\[][$defaultkey]/$'\e[32;1m'[$defaultkeyUpperCase}
    fi
    # read until a valid key is entered
    local intr=false
    trap "intr=true" INT
    while ! $intr; do
        REPLY=
        read -p "$prompt" -n 1 ${timeout:+-t $timeout} -s || :
        REPLY=${REPLY#[[:space:]]}
        [ -n "$REPLY" ] || REPLY=$defaultkey
        echo "$REPLY"
        REPLY=$(tr A-Z a-z <<<"$REPLY")
        [[ $REPLY = ${REPLY/$keys/} ]] || break
    done
    eval "$keyVarName=$REPLY"
    trap - INT
    ! $intr || {
        # return key in the variable unless interrupted
        eval "$keyVarName="
        return 2
    }
}

}
